{"/home/travis/build/npmtest/node-npmtest-bigrig/test.js":"/* istanbul instrument in package npmtest_bigrig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bigrig/lib.npmtest_bigrig.js":"/* istanbul instrument in package npmtest_bigrig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bigrig = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bigrig = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bigrig/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bigrig && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bigrig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bigrig\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bigrig.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bigrig.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bigrig.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bigrig.__dirname + '/lib.npmtest_bigrig.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bigrig/node_modules/bigrig/index.js":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nvar processor = require('./lib/processor');\n\nmodule.exports = {\n\n  RESPONSE: processor.RESPONSE,\n  ANIMATION: processor.ANIMATION,\n  LOAD: processor.LOAD,\n\n  analyze: function (traceContents, opts) {\n    return processor.analyzeTrace(traceContents, opts);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-bigrig/node_modules/bigrig/lib/processor.js":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global tr */\n\nvar URL = require('url');\nvar RESPONSE = 'Response';\nvar ANIMATION = 'Animation';\nvar LOAD = 'Load';\n\n// Does a bunch on the global object, because the code for trace viewer\n// currently operates on `window`, and the conversion doesn't account for\n// requires and modules.\nvar globalConfig = require('./global-config.js');\n\nfunction analyzeTrace (contents, opts) {\n\n  var contentsJSON = null;\n\n  try {\n    contentsJSON = JSON.parse(contents);\n\n    // If the file already wrapped the trace events in a\n    // traceEvents object, grab the contents of the object.\n    if (contentsJSON !== null &&\n      typeof contentsJSON.traceEvents !== 'undefined') {\n      contentsJSON = contentsJSON.traceEvents;\n    }\n\n  } catch (e) {\n    throw 'Invalid trace contents; not JSON';\n  }\n\n  var events = [JSON.stringify({\n    traceEvents: contentsJSON\n  })];\n\n  // Switch on all the globals we need, and import tracing.\n  globalConfig.enable();\n\n  var model = convertEventsToModel(events);\n  var processes = model.getAllProcesses();\n  var traceProcess = null;\n  var summarizable = [];\n\n  for (var p = 0; p < processes.length; p++) {\n    var candidate = processes[p];\n\n    if (typeof candidate.labels !== 'undefined' &&\n        candidate.labels.length > 0 &&\n        candidate.labels[0] !== 'chrome://tracing' &&\n        candidate.labels[0] !== 'BackgroundPage') {\n      summarizable.push(candidate);\n    }\n\n    if (typeof candidate.labels !== 'undefined' &&\n        candidate.labels[0] === 'BackgroundPage') {\n\n      var error = 'Extensions running during capture; ' +\n                  'see http://bit.ly/bigrig-extensions';\n      if (typeof opts !== 'undefined' && opts.strict) {\n        throw error;\n      }\n    }\n  }\n\n  if (summarizable.length === 0) {\n    throw 'Zero processes (tabs) found.';\n  }\n\n  if (summarizable.length > 1) {\n    var bullet = '\\n  * ';\n    var tabs = summarizable\n        .map(pr => pr.labels[0])\n        .map(l => l.trim()).join(bullet);\n\n    console.warn('Multiple processes (tabs) found:' + bullet, tabs);\n\n    summarizable = summarizable\n        .filter(pr => !!pr.labels[0])\n        .slice(-1);\n\n    console.log('\\nProceeding using the last named tab:' + bullet,\n        summarizable[0].labels[0]);\n  }\n\n  traceProcess = summarizable.pop();\n  // Reset all the globals we had to define for window etc.\n  globalConfig.disable();\n  return processTrace(model, traceProcess, opts);\n}\n\nfunction convertEventsToModel (events) {\n\n  require('./third_party/tracing/importer/import.js');\n  require('./third_party/tracing/extras/importer/trace_event_importer.js');\n  require('./third_party/tracing/extras/rail/rail_score.js');\n  require('./third_party/tracing/extras/rail/rail_ir_finder.js');\n  require('./tracing-config.js');\n\n  var io = new tr.importer.ImportOptions();\n  io.showImportWarnings = false;\n  io.shiftWorldToZero = true;\n  io.pruneEmptyContainers = false;\n\n  var model = new tr.Model();\n  var importer = new tr.importer.Import(model, io);\n  importer.importTraces(events);\n\n  return model;\n}\n\nfunction processTrace (model, traceProcess, opts) {\n\n  var threads = getThreads(traceProcess);\n  var rendererThread = getThreadByName(traceProcess, 'CrRendererMain');\n\n  if (!rendererThread) {\n    throw 'Can\\'t find renderer thread';\n  }\n\n  var timeRanges = getTimeRanges(rendererThread);\n\n  if (timeRanges.length === 0) {\n    timeRanges = [{\n      title: LOAD,\n      start: model.bounds.min,\n      duration: (model.bounds.max - model.bounds.min)\n    }];\n  }\n\n  return createRangesForTrace(timeRanges, threads, opts);\n}\n\nfunction createRangesForTrace (timeRanges, threads, opts) {\n\n\n  var results = [];\n  var baseTypes = {\n    'Load': LOAD\n  };\n\n  if (typeof opts === 'undefined') {\n    opts = {\n      types: baseTypes\n    };\n  }\n\n  if (typeof opts.types === 'undefined') {\n    opts.types = baseTypes;\n  }\n\n  /* eslint-disable */\n  // Disable linting because eslint can't differentiate JSON from non-JSON\n  // @see https://github.com/eslint/eslint/issues/3484\n\n  timeRanges.forEach(function(timeRange) {\n\n    var frames = 0;\n    var timeRangeEnd = timeRange.start + timeRange.duration;\n    var result = {\n      \"start\": timeRange.start,\n      \"end\": timeRangeEnd,\n      \"duration\": timeRange.duration,\n      \"parseHTML\": 0,\n      \"javaScript\": 0,\n      \"javaScriptCompile\": 0,\n      \"styles\": 0,\n      \"updateLayerTree\": 0,\n      \"layout\": 0,\n      \"paint\": 0,\n      \"raster\": 0,\n      \"composite\": 0,\n      \"extendedInfo\": {\n        \"domContentLoaded\": 0,\n        \"loadTime\": 0,\n        \"firstPaint\": 0,\n        \"javaScript\": {\n\n        }\n      },\n      \"title\": timeRange.title,\n      \"type\": opts.types[timeRange.title]\n    };\n\n    /* eslint-enable */\n\n    threads.forEach(function (thread) {\n\n      var slices = thread.sliceGroup.topLevelSlices;\n      var slice = null;\n\n      for (var s = 0 ; s < slices.length; s++) {\n        slice = slices[s];\n\n        if (slice.start < timeRange.start || slice.end > timeRangeEnd) {\n          continue;\n        }\n\n        slice.iterateAllDescendents(function (subslice) {\n          addDurationToResult(subslice, result);\n        });\n      }\n\n\n      thread.iterateAllEvents(function (evt) {\n\n        if (evt.start < timeRange.start || evt.end > timeRangeEnd) {\n          return;\n        }\n\n        switch (evt.title) {\n\n          case 'DrawFrame':\n            frames++;\n            break;\n\n          case 'MarkDOMContent':\n            result.extendedInfo.domContentLoaded = evt.start;\n            break;\n\n          case 'MarkLoad':\n            result.extendedInfo.loadTime = evt.start;\n            break;\n\n          case 'MarkFirstPaint':\n            result.extendedInfo.firstPaint = evt.start;\n            break;\n\n          default:\n            // Ignore\n            break;\n        }\n      });\n\n    });\n\n    if (typeof result.type === 'undefined') {\n      if (timeRange.title === LOAD) {\n        result.type = LOAD;\n      } else if (frames > 5) {\n        result.type = ANIMATION;\n      } else {\n        result.type = RESPONSE;\n      }\n    }\n\n    // Convert to fps.\n    if (result.type === ANIMATION) {\n      result.fps = Math.floor(frames / (result.duration / 1000));\n      result.frameCount = frames;\n    }\n\n    results.push(result);\n  });\n\n  return results;\n}\n\nfunction hasStackInfo (slice) {\n  return slice.args &&\n      slice.args.beginData &&\n      slice.args.beginData.stackTrace &&\n      slice.args.beginData.stackTrace.length;\n}\n\nfunction getJavascriptUrlFromStackInfo (slice) {\n  var url = null;\n\n  if (typeof slice.args.data === 'undefined') {\n    return url;\n  }\n\n  // Check for the URL in the slice.\n  // Failing that, look for scriptName.\n  if (typeof slice.args.data.url !== 'undefined' &&\n      slice.args.data.url !== '' &&\n      /^http/.test(slice.args.data.url)) {\n\n    url = slice.args.data.url;\n  } else if (typeof slice.args.data.scriptName !== 'undefined' &&\n      slice.args.data.scriptName !== '' &&\n      /^http/.test(slice.args.data.scriptName)) {\n\n    url = slice.args.data.scriptName;\n  }\n\n  return url;\n}\n\nfunction addDurationToResult (slice, result) {\n\n  var duration = getBestDurationForSlice(slice);\n  var hasStack;\n\n  switch (slice.title) {\n    case 'ParseHTML':\n      result.parseHTML += duration;\n      break;\n\n    case 'FunctionCall':\n    case 'EvaluateScript':\n    case 'V8.Execute':\n    case 'MajorGC':\n    case 'MinorGC':\n    case 'GCEvent':\n      result.javaScript += duration;\n\n      // If we have JS Stacks find out who the culprits are for the\n      // JavaScript that is running.\n      var owner = getJavascriptUrlFromStackInfo(slice);\n\n      if (owner !== null) {\n        var url = URL.parse(owner);\n        var host = url.host;\n\n        if (!result.extendedInfo.javaScript[host]) {\n          result.extendedInfo.javaScript[host] = 0;\n        }\n\n        result.extendedInfo.javaScript[host] += duration;\n      }\n      break;\n\n    case 'v8.compile':\n      result.javaScriptCompile += duration;\n      break;\n\n    case 'UpdateLayoutTree':\n    case 'RecalculateStyles':\n    case 'ParseAuthorStyleSheet':\n      result.styles += duration;\n\n      // If there's a stack trace then this has been forced.\n      hasStack = hasStackInfo(slice);\n\n      if (hasStack) {\n\n        if (typeof result.extendedInfo.forcedRecalcs === 'undefined') {\n          result.extendedInfo.forcedRecalcs = 0;\n        }\n\n        result.extendedInfo.forcedRecalcs++;\n      }\n      break;\n\n    case 'UpdateLayerTree':\n      result.updateLayerTree += duration;\n      break;\n\n    case 'Layout':\n      result.layout += duration;\n\n      // If there's a stack trace then this has been forced.\n      hasStack = hasStackInfo(slice);\n\n      if (hasStack) {\n\n        if (typeof result.extendedInfo.forcedLayouts === 'undefined') {\n          result.extendedInfo.forcedLayouts = 0;\n        }\n\n        result.extendedInfo.forcedLayouts++;\n      }\n      break;\n\n    case 'Paint':\n      result.paint += duration;\n      break;\n\n    case 'RasterTask':\n    case 'Rasterize':\n      result.raster += duration;\n      break;\n\n    case 'CompositeLayers':\n      result.composite += duration;\n      break;\n\n    default:\n      // Disregard unknown types.\n      break;\n  }\n}\n\nfunction getBestDurationForSlice (slice) {\n\n  var duration = 0;\n\n  if (typeof slice.cpuSelfTime !== 'undefined') {\n    duration = slice.cpuSelfTime;\n  } else if (typeof slice.cpuDuration !== 'undefined') {\n    duration = slice.cpuDuration;\n  } else if (typeof slice.duration !== 'undefined') {\n    duration = slice.duration;\n  }\n\n  return duration;\n}\n\nfunction getThreads (traceProcess) {\n\n  var threadKeys = Object.keys(traceProcess.threads);\n  var threadKey = null;\n  var threads = [];\n  var thread = null;\n\n  for (var t = 0; t < threadKeys.length; t++) {\n    threadKey = threadKeys[t];\n    thread = traceProcess.threads[threadKey];\n\n    if (typeof thread.name === 'undefined') {\n      continue;\n    }\n\n    if (thread.name === 'Compositor' ||\n        thread.name === 'CrRendererMain' ||\n        thread.name.indexOf('CompositorTileWorker') >= 0) {\n      threads.push(thread);\n    }\n  }\n\n  return threads;\n}\n\nfunction getThreadByName (traceProcess, name) {\n\n  var threadKeys = Object.keys(traceProcess.threads);\n  var threadKey = null;\n  var thread = null;\n\n  for (var t = 0; t < threadKeys.length; t++) {\n    threadKey = threadKeys[t];\n    thread = traceProcess.threads[threadKey];\n\n    if (thread.name === name) {\n      return thread;\n    }\n  }\n\n  return null;\n}\n\nfunction getTimeRanges (thread) {\n\n  var timeRanges = [];\n  thread.iterateAllEvents(function (evt) {\n    if (evt.category === 'blink.console' && typeof evt.start === 'number') {\n      timeRanges.push(evt);\n    }\n  });\n\n  return timeRanges;\n}\n\nmodule.exports = {\n  RESPONSE: RESPONSE,\n  ANIMATION: ANIMATION,\n  LOAD: LOAD,\n  analyzeTrace: analyzeTrace\n};\n","/home/travis/build/npmtest/node-npmtest-bigrig/node_modules/bigrig/lib/global-config.js":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction enable () {\n  // Sets some global options so that the trace viewer code can work.\n  // It expects to be run inside of a browser, where host objects\n  // (and Polymer) exist. Since they don't they need stubbing out.\n  global.Polymer = function () {};\n  global.Polymer.elements = {};\n\n  global.HTMLUnknownElement = {};\n  global.HTMLDivElement = {};\n  global.document = {\n    currentScript: {\n      ownerDocument: {}\n    },\n\n    createElement: function () {\n      return {\n        style: {\n\n        }\n      };\n    }\n  };\n\n  global.vec2 = {create: function () {}, set: function () {}};\n  global.vec3 = {create: function () {}};\n  global.vec4 = {create: function () {}};\n  global.mat2d = {create: function () {}};\n  global.mat4 = {create: function () {}};\n  global.window = {\n    performance: {\n      now: function () {\n        return Date.now();\n      }\n    }, webkitRequestAnimationFrame: function (cb) {\n      cb();\n    }, requestAnimationFrame: function (cb) {\n      cb();\n    }\n  };\n}\n\nfunction disable () {\n\n  delete global.Polymer.elements;\n  delete global.Polymer;\n\n  delete global.HTMLUnknownElement;\n  delete global.HTMLDivElement;\n  delete global.document;\n\n  delete global.vec2;\n  delete global.vec3;\n  delete global.vec4;\n  delete global.mat2d;\n  delete global.mat4;\n  delete global.window;\n}\n\nmodule.exports = {\n  enable: enable,\n  disable: disable\n};\n","/home/travis/build/npmtest/node-npmtest-bigrig/node_modules/bigrig/bigrig.js":"#!/usr/bin/env node\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar yargs = require('yargs')\n    .usage('Usage: bigrig <input> [<option>]')\n    .option('file', {\n      alias: 'f',\n      demand: false,\n      default: '',\n      describe: 'The trace file to be parsed'\n    })\n    .option('pretty-print', {\n      alias: 'pp',\n      demand: false,\n      default: false,\n      describe: 'Pretty print the results'\n    })\n    .option('strict', {\n      alias: 's',\n      demand: false,\n      default: false,\n      describe: 'Throw if extensions are found'\n    });\n\nvar argv = yargs.argv;\n\nvar clc = require('cli-color');\nvar fs = require('fs');\nvar processor = require('./lib/processor');\nvar path = argv.file;\nvar traceContents = '';\n\n// If there's no --file arg and there's an unnamed arg passed, try\n// setting the path to that.\nif (path === '' && typeof argv._ !== 'undefined' && argv._.length > 0) {\n  path = argv._[0];\n}\n\n// Check the file exists.\ntry {\n\n  fs.statSync(path);\n  traceContents = fs.readFileSync(path, 'utf8');\n  processContents(traceContents);\n\n} catch (fileProcessError) {\n\n  if (typeof fileProcessError === 'string' ||\n      fileProcessError.code !== 'ENOENT') {\n    bailWithMessage(fileProcessError.toString());\n  }\n\n  var checkedFirstChunk = false;\n\n  // Assume reading from stdin\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('readable', function () {\n    var chunk = process.stdin.read();\n\n    // If the very first chunk is null, then\n    // we weren't given any data, so exit.\n    if (!checkedFirstChunk) {\n\n      checkedFirstChunk = true;\n      if (chunk === null) {\n        console.log(yargs.help());\n        process.exit(1);\n      }\n    }\n\n    if (chunk !== null) {\n      traceContents += chunk;\n    }\n\n  });\n\n  process.stdin.on('end', function () {\n    try {\n      processContents(traceContents, {\n        strict: argv.strict\n      });\n    } catch (processError) {\n      bailWithMessage(processError.toString());\n    }\n  });\n}\n\nfunction processContents (contents) {\n\n  // Read the file, analyze, and print.\n  var results = processor.analyzeTrace(contents, {\n    strict: argv.strict\n  });\n\n  if (argv['pretty-print']) {\n    prettyPrint(results);\n  } else {\n    console.log(JSON.stringify(results));\n  }\n\n}\n\nfunction bailWithMessage (msg) {\n  console.warn(clc.red('Unable to process trace: ') + clc.yellow(msg));\n  process.exit(1);\n}\n\nfunction prettyPrint (result, indent, frameCount) {\n\n  indent = indent || 0;\n  frameCount = frameCount || 1;\n\n  var paddingDistance = 40;\n  var labelPadding = padOut('', indent);\n  var keys = Object.keys(result);\n  var key;\n  var colorFn = clc.cyan;\n  var label;\n  var value;\n  var suffix;\n  var perFrameValue;\n\n  function padOut (str, len) {\n\n    while (str.length < len) {\n      str += ' ';\n    }\n\n    return str;\n  }\n\n  // For empty objects write out something, otherwise\n  // it looks like a big ol' error.\n  if (keys.length === 0) {\n    console.log(labelPadding + '{}');\n  }\n\n  for (var k = 0; k < keys.length; k++) {\n\n    perFrameValue = undefined;\n    suffix = '';\n    key = keys[k];\n    value = result[keys[k]];\n\n    // Skip the title and type values, because\n    // they will be incorporated by the top level.\n    if (key === 'title' || key === 'type') {\n      continue;\n    }\n\n    // If we have a numeric key, this is a top level item.\n    if (!isNaN(parseInt(key))) {\n\n      // Color it magenta and incorporate the keys\n      // we skipped just a moment ago.\n      colorFn = clc.magentaBright;\n      key = value.title + ' [' + value.type + ']';\n\n      // Get values per frame if this is an animation.\n      if (value.type === processor.ANIMATION &&\n          typeof value.frameCount !== 'undefined') {\n        frameCount = value.frameCount;\n      }\n    }\n\n    label = colorFn(padOut(key + ':', paddingDistance - indent));\n\n    // If the number is numeric, but not the fps\n    // tidy it up and add a suffix.\n    if (typeof value === 'number') {\n\n      if (key !== 'fps' &&\n          key !== 'frameCount' &&\n          key !== 'forcedRecalcs' &&\n          key !== 'forcedLayouts') {\n\n        perFrameValue = (value / frameCount).toFixed(2) + 'ms';\n\n        value = value.toFixed(2);\n        suffix = 'ms';\n      }\n\n      value = value + suffix;\n\n      if (key !== 'start' &&\n          key !== 'end' &&\n          key !== 'duration' &&\n          key !== 'domContentLoaded' &&\n          key !== 'loadTime' &&\n          key !== 'firstPaint' &&\n          perFrameValue &&\n          frameCount !== 1) {\n        value = padOut(value, 12) + ' (' + perFrameValue + ' per frame)';\n      }\n    }\n\n    if (typeof value === 'object') {\n      console.log(labelPadding + label);\n      prettyPrint(value, indent + 2, frameCount);\n    } else {\n      var msg = labelPadding + label + value;\n      console.log(msg);\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-bigrig/node_modules/bigrig/lib/tracing-config.js":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global tr */\n\n// Sets up a few stubs for tracing, particularly for the HTML Elements it\n// expects to exist, which won't because this is running in Node.\ntr.isHeadless = false;\ntr.ui.b.Overlay = function () {\n  return {\n    title: '',\n    msgEl: {\n      style: {\n        margin: ''\n      }\n    },\n    appendChild: function () {\n    }\n  };\n};\n"}